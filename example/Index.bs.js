// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Oolong = require("../src/Oolong.bs.js");
var ReactDOMRe = require("reason-react/src/legacy/ReactDOMRe.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Oolong_Internals = require("../src/Oolong_Internals.bs.js");

function Index$S(Props) {
  var children = Props.children;
  return [children].join(" ");
}

var S = {
  make: Index$S
};

function app(param) {
  var serializeState = function (state) {
    var user = state.user;
    var user$1 = typeof user === "number" ? "" : user._0;
    return Oolong_Internals.Url.make({
                hd: String(state.counter),
                tl: /* [] */0
              }, "", user$1);
  };
  var program = Oolong.routerProgram(serializeState, "CounterExample");
  var login = function (self) {
    var username = self.state.user;
    if (typeof username === "number") {
      return ;
    }
    if (username.TAG !== /* LoggingIn */1) {
      return ;
    }
    var username$1 = username._0;
    console.log("Doing login for", username$1);
    setTimeout((function (param) {
            if (username$1 === "phated") {
              return Curry._1(self.send, {
                          TAG: /* LoginSuccess */2,
                          _0: username$1,
                          _1: "Blaine"
                        });
            } else {
              return Curry._1(self.send, {
                          TAG: /* LoginFailure */3,
                          _0: username$1
                        });
            }
          }), 500);
    
  };
  var getUser = function (hash) {
    if (hash === "") {
      return /* NoUser */0;
    } else {
      return {
              TAG: /* LoggingIn */1,
              _0: hash
            };
    }
  };
  return {
          debugName: program.debugName,
          serializeState: program.serializeState,
          init: (function (path, _search, hash) {
              if (path && !path.tl) {
                return {
                        TAG: /* StateWithSideEffects */1,
                        _0: {
                          counter: Caml_format.caml_int_of_string(path.hd),
                          user: getUser(hash)
                        },
                        _1: login
                      };
              } else {
                return {
                        TAG: /* State */0,
                        _0: {
                          counter: 0,
                          user: /* NoUser */0
                        }
                      };
              }
            }),
          fromRoute: (function (routeAction, _state) {
              console.log("fromRoute", routeAction);
              var match = routeAction._0;
              if (match && !match.tl) {
                return {
                        TAG: /* StateWithSideEffects */1,
                        _0: {
                          counter: Caml_format.caml_int_of_string(match.hd),
                          user: getUser(routeAction._2)
                        },
                        _1: login
                      };
              } else {
                return {
                        TAG: /* State */0,
                        _0: {
                          counter: 0,
                          user: /* NoUser */0
                        }
                      };
              }
            }),
          toRoute: (function (action, state) {
              console.log("reducer", action, state);
              if (typeof action === "number") {
                switch (action) {
                  case /* Increment */0 :
                      console.log("increment");
                      return {
                              TAG: /* Push */0,
                              _0: {
                                counter: state.counter + 1 | 0,
                                user: state.user
                              }
                            };
                  case /* Decrement */1 :
                      console.log("decrement");
                      return {
                              TAG: /* Push */0,
                              _0: {
                                counter: state.counter - 1 | 0,
                                user: state.user
                              }
                            };
                  case /* Nothing */2 :
                      console.log("nothing");
                      return {
                              TAG: /* Replace */2,
                              _0: state
                            };
                  
                }
              } else {
                switch (action.TAG | 0) {
                  case /* Double */0 :
                      console.log("double");
                      return {
                              TAG: /* Replace */2,
                              _0: {
                                counter: (action._0 << 1),
                                user: state.user
                              }
                            };
                  case /* Login */1 :
                      return {
                              TAG: /* PushWithSideEffects */1,
                              _0: {
                                counter: state.counter,
                                user: {
                                  TAG: /* LoggingIn */1,
                                  _0: action._0
                                }
                              },
                              _1: login
                            };
                  case /* LoginSuccess */2 :
                      return {
                              TAG: /* Replace */2,
                              _0: {
                                counter: state.counter,
                                user: {
                                  TAG: /* LoggedIn */2,
                                  _0: action._0,
                                  _1: action._1
                                }
                              }
                            };
                  case /* LoginFailure */3 :
                      return {
                              TAG: /* Replace */2,
                              _0: {
                                counter: state.counter,
                                user: {
                                  TAG: /* InvalidUser */0,
                                  _0: action._0
                                }
                              }
                            };
                  
                }
              }
            }),
          render: (function (self) {
              console.log("render", self);
              var username = self.state.user;
              var userMessage;
              if (typeof username === "number") {
                userMessage = "Not logged in.";
              } else {
                switch (username.TAG | 0) {
                  case /* InvalidUser */0 :
                      userMessage = username._0 + " is an invalid user";
                      break;
                  case /* LoggingIn */1 :
                      userMessage = "Logging in as: " + username._0;
                      break;
                  case /* LoggedIn */2 :
                      userMessage = "Welcome " + (username._1 + "!");
                      break;
                  
                }
              }
              return React.createElement("div", undefined, React.createElement(Index$S, {
                              children: String(self.state.counter)
                            }), React.createElement("button", {
                              onClick: (function (param) {
                                  return Curry._1(self.send, /* Increment */0);
                                })
                            }, React.createElement(Index$S, {
                                  children: "Increment"
                                })), React.createElement("button", {
                              onClick: (function (param) {
                                  return Curry._1(self.send, /* Decrement */1);
                                })
                            }, React.createElement(Index$S, {
                                  children: "Decrement"
                                })), React.createElement("button", {
                              onClick: (function (e) {
                                  return Curry._1(self.send, {
                                              TAG: /* Double */0,
                                              _0: self.state.counter
                                            });
                                })
                            }, React.createElement(Index$S, {
                                  children: "Double"
                                })), React.createElement("button", {
                              onClick: (function (param) {
                                  return Curry._1(self.send, /* Nothing */2);
                                })
                            }, React.createElement(Index$S, {
                                  children: "Do Nothing"
                                })), React.createElement("button", {
                              onClick: (function (param) {
                                  return Curry._1(self.send, {
                                              TAG: /* Login */1,
                                              _0: "phated"
                                            });
                                })
                            }, React.createElement(Index$S, {
                                  children: "Login as phated"
                                })), React.createElement("div", undefined, React.createElement(Index$S, {
                                  children: userMessage
                                })));
            }),
          subscriptions: program.subscriptions
        };
}

Oolong.run(Caml_option.some(Oolong_Internals.Router.hash(undefined)), app(undefined))(function (view) {
      return ReactDOMRe.renderToElementWithId(view, "app");
    });

exports.S = S;
exports.app = app;
/*  Not a pure module */
