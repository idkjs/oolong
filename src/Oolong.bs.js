// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Oolong_Internals = require("./Oolong_Internals.bs.js");

function makeSelf(send, getState) {
  return {
          state: Curry._1(getState, undefined),
          send: send,
          handle: (function (fn, data) {
              return Curry._2(fn, data, makeSelf(send, getState));
            })
        };
}

function make(debugName) {
  return {
          debugName: debugName,
          initialState: (function (param) {
              return Pervasives.failwith("Must implement initialState method.");
            }),
          reducer: (function (_action, _state) {
              return Pervasives.failwith("Must implement reducer method.");
            }),
          render: (function (_self) {
              return Pervasives.failwith("Must implement render method.");
            }),
          subscriptions: (function (_state) {
              return /* [] */0;
            })
        };
}

function make$1(serializeState, debugName) {
  return {
          debugName: debugName,
          serializeState: serializeState,
          init: (function (_path, _search, _hash) {
              return Pervasives.failwith("Must implement init method.");
            }),
          fromRoute: (function (_routerAction, _state) {
              return Pervasives.failwith("Must implement fromRoute method.");
            }),
          toRoute: (function (_action, _state) {
              return Pervasives.failwith("Must implement reducer method.");
            }),
          render: (function (_self) {
              return Pervasives.failwith("Must implement render method.");
            }),
          subscriptions: (function (_state) {
              return /* [] */0;
            })
        };
}

function getUserSelf(ourSelf) {
  var send = function (action) {
    return Curry._1(ourSelf.send, {
                TAG: /* UserAction */0,
                _0: action
              });
  };
  var getState = function (param) {
    return ourSelf.state._0;
  };
  return makeSelf(send, getState);
}

function wrapSideEffect(userSideEffect, ourSelf) {
  return Curry._1(userSideEffect, getUserSelf(ourSelf));
}

function emptySideEffect(_self) {
  
}

function run(router, program) {
  var router$1 = router !== undefined ? Caml_option.valFromOption(router) : Oolong_Internals.Router.hash(undefined);
  var ourProgram = make(program.debugName + "_Internal");
  var initialRoute = Oolong_Internals.Route.fromLocation(Oolong_Internals.Router.getCurrent(router$1));
  var initialSideEffect = {
    contents: emptySideEffect
  };
  var initialState = function (param) {
    var routeState = Curry._3(program.init, initialRoute.path, initialRoute.search, initialRoute.hash);
    if (routeState.TAG === /* State */0) {
      return /* UserState */{
              _0: routeState._0
            };
    }
    var sideEffect = routeState._1;
    initialSideEffect.contents = (function (param) {
        return Curry._1(sideEffect, getUserSelf(param));
      });
    return /* UserState */{
            _0: routeState._0
          };
  };
  var reducer = function (ourAction, ourState) {
    var state = ourState._0;
    if (ourAction.TAG === /* UserAction */0) {
      var action = ourAction._0;
      var userUpdate = Curry._2(program.toRoute, action, state);
      if (typeof userUpdate === "number") {
        router$1.goBack();
        return /* NoUpdate */0;
      }
      switch (userUpdate.TAG | 0) {
        case /* Push */0 :
            var next = userUpdate._0;
            Oolong_Internals.Router.pushAtomic(router$1, Curry._1(program.serializeState, next));
            return {
                    TAG: /* Update */0,
                    _0: /* UserState */{
                      _0: next
                    }
                  };
        case /* PushWithSideEffects */1 :
            var sideEffect = userUpdate._1;
            var next$1 = userUpdate._0;
            Oolong_Internals.Router.pushAtomic(router$1, Curry._1(program.serializeState, next$1));
            return {
                    TAG: /* UpdateWithSideEffects */1,
                    _0: /* UserState */{
                      _0: next$1
                    },
                    _1: (function (param) {
                        return Curry._1(sideEffect, getUserSelf(param));
                      })
                  };
        case /* Replace */2 :
            var next$2 = userUpdate._0;
            Oolong_Internals.Router.replaceAtomic(router$1, Curry._1(program.serializeState, next$2));
            return {
                    TAG: /* Update */0,
                    _0: /* UserState */{
                      _0: next$2
                    }
                  };
        case /* ReplaceWithSideEffects */3 :
            var sideEffect$1 = userUpdate._1;
            var next$3 = userUpdate._0;
            Oolong_Internals.Router.replaceAtomic(router$1, Curry._1(program.serializeState, next$3));
            return {
                    TAG: /* UpdateWithSideEffects */1,
                    _0: /* UserState */{
                      _0: next$3
                    },
                    _1: (function (param) {
                        return Curry._1(sideEffect$1, getUserSelf(param));
                      })
                  };
        case /* PopWithSideEffects */4 :
            var sideEffect$2 = userUpdate._0;
            router$1.goBack();
            return {
                    TAG: /* SideEffects */2,
                    _0: (function (param) {
                        return Curry._1(sideEffect$2, getUserSelf(param));
                      })
                  };
        
      }
    } else {
      var routerAction = ourAction._0;
      var routeState = Curry._2(program.fromRoute, routerAction, state);
      if (routeState.TAG === /* State */0) {
        return {
                TAG: /* Update */0,
                _0: /* UserState */{
                  _0: routeState._0
                }
              };
      }
      var sideEffect$3 = routeState._1;
      return {
              TAG: /* UpdateWithSideEffects */1,
              _0: /* UserState */{
                _0: routeState._0
              },
              _1: (function (param) {
                  return Curry._1(sideEffect$3, getUserSelf(param));
                })
            };
    }
  };
  var render = function (ourSelf) {
    return Curry._1(program.render, getUserSelf(ourSelf));
  };
  var subscriptions = function (wrappedState) {
    var historySubscription = function (self) {
      Oolong_Internals.Router.listen((function (routerAction) {
              return Curry._1(self.send, {
                          TAG: /* RouteChanged */1,
                          _0: routerAction
                        });
            }), router$1);
      
    };
    var userState = wrappedState._0;
    var subs = Belt_List.map(Curry._1(program.subscriptions, userState), wrapSideEffect);
    return {
            hd: historySubscription,
            tl: {
              hd: initialSideEffect.contents,
              tl: subs
            }
          };
  };
  var partial_arg_debugName = ourProgram.debugName;
  return function (param) {
    var state = {
      contents: Curry._1(initialState, undefined)
    };
    var loopCounter = {
      contents: 0
    };
    var getState = function (param) {
      return state.contents;
    };
    var send = function (action) {
      loopCounter.contents = loopCounter.contents + 1 | 0;
      var previous = state.contents;
      var update = Curry._2(reducer, action, previous);
      if (typeof update !== "number") {
        switch (update.TAG | 0) {
          case /* Update */0 :
              state.contents = update._0;
              break;
          case /* UpdateWithSideEffects */1 :
              state.contents = update._0;
              Curry._1(update._1, makeSelf(send, getState));
              break;
          case /* SideEffects */2 :
              Curry._1(update._0, makeSelf(send, getState));
              break;
          
        }
      }
      var next = state.contents;
      loopCounter.contents = loopCounter.contents - 1 | 0;
      if (loopCounter.contents === 0 && next !== previous) {
        Curry._1(param, Curry._1(render, makeSelf(send, getState)));
        return ;
      }
      
    };
    Belt_List.forEach(Curry._1(subscriptions, state.contents), (function (subscription) {
            return Curry._1(subscription, makeSelf(send, getState));
          }));
    Curry._1(param, Curry._1(render, makeSelf(send, getState)));
    
  };
}

function Oolong$ReactProgram(Props) {
  var program = Props.program;
  var router = Props.router;
  var match = React.useReducer((function (_state, action) {
          return action._0;
        }), null);
  var dispatch = match[1];
  React.useEffect(function () {
        run(router, Curry._1(program, undefined))(function (view) {
              return Curry._1(dispatch, /* Render */{
                          _0: view
                        });
            });
        
      });
  return React.createElement(React.Fragment, undefined, match[0]);
}

var ReactProgram = {
  make: Oolong$ReactProgram
};

var Url;

var Route;

var Router;

var RouterAction;

var RouterProgram = {
  make: make$1,
  run: run
};

var routerProgram = make$1;

exports.Url = Url;
exports.Route = Route;
exports.Router = Router;
exports.RouterAction = RouterAction;
exports.RouterProgram = RouterProgram;
exports.ReactProgram = ReactProgram;
exports.routerProgram = routerProgram;
exports.run = run;
/* react Not a pure module */
