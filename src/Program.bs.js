// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Route$ReasonTea = require("./Route.bs.js");
var Router$ReasonTea = require("./Router.bs.js");

function getRoute($$location) {
  return Route$ReasonTea.make(Route$ReasonTea.path($$location), Route$ReasonTea.hash($$location), Route$ReasonTea.search($$location));
}

var defaultRoute = Route$ReasonTea.make(/* :: */[
      "",
      /* [] */0
    ], "", "");

function fromRouteDefault(_, _$1) {
  return /* NoUpdate */0;
}

function toRouteDefault() {
  return /* NoTransition */1;
}

function updateDefault(_, _$1) {
  return /* NoUpdate */0;
}

function viewDefault() {
  return Pervasives.failwith("Must assign a view method");
}

function program(debug) {
  return /* record */[
          /* debug */debug,
          /* fromRoute */fromRouteDefault,
          /* toRoute */toRouteDefault,
          /* update */updateDefault,
          /* view */viewDefault
        ];
}

function programStateWrapper(initState, maybeEffect, looper) {
  var currentState = /* record */[/* contents */initState];
  var loopCounter = /* record */[/* contents */0];
  var makeSelf = function (state) {
    return /* record */[
            /* state */state,
            /* send */runner,
            /* handle */(function (fn, data) {
                return Curry._2(fn, data, makeSelf(state));
              })
          ];
  };
  var handle = function (maybeNextState, maybeEffect) {
    if (maybeNextState !== undefined) {
      var nextState = Js_primitive.valFromOption(maybeNextState);
      if (Caml_obj.caml_notequal(nextState, currentState[0])) {
        Curry._1(looper[/* updateRoute */4], /* record */[
              /* previous */currentState[0],
              /* next */nextState
            ]);
        currentState[0] = nextState;
      }
      
    }
    if (maybeEffect !== undefined) {
      Curry._1(maybeEffect, makeSelf(currentState[0]));
      return /* () */0;
    } else {
      return /* () */0;
    }
  };
  var runner = function (action) {
    loopCounter[0] = loopCounter[0] + 1 | 0;
    var match = Curry._2(looper[/* dispatch */2], action, currentState[0]);
    handle(match[0], match[1]);
    loopCounter[0] = loopCounter[0] - 1 | 0;
    if (loopCounter[0] === 0) {
      Curry._1(looper[/* render */5], makeSelf(currentState[0]));
    }
    return /* () */0;
  };
  Curry._1(looper[/* listen */1], (function ($$location, action) {
          var match = Curry._2(looper[/* getFromRoute */3], action, getRoute($$location));
          return handle(match[0], match[1]);
        }));
  if (maybeEffect !== undefined) {
    Curry._1(maybeEffect, makeSelf(currentState[0]));
  }
  Curry._1(looper[/* render */5], makeSelf(currentState[0]));
  return /* () */0;
}

function loop(router, update, view, toRoute, fromRoute, enqueueRender) {
  var previousRoute = /* record */[/* contents */getRoute(Router$ReasonTea.getCurrent(router))];
  var updateToOptions = function (update) {
    if (typeof update === "number") {
      return /* tuple */[
              undefined,
              undefined
            ];
    } else if (update.tag) {
      return /* tuple */[
              Js_primitive.some(update[0]),
              update[1]
            ];
    } else {
      return /* tuple */[
              Js_primitive.some(update[0]),
              undefined
            ];
    }
  };
  return /* record */[
          /* init */(function () {
              var $$location = Router$ReasonTea.getCurrent(router);
              return updateToOptions(Curry._2(fromRoute, /* Init */0, getRoute($$location)));
            }),
          /* listen */(function (callback) {
              Router$ReasonTea.listen(callback, router);
              return /* () */0;
            }),
          /* dispatch */(function (action, state) {
              return updateToOptions(Curry._2(update, action, state));
            }),
          /* getFromRoute */(function (action, route) {
              var $$location = getRoute(Router$ReasonTea.getCurrent(router));
              if (Caml_obj.caml_notequal(previousRoute[0], $$location)) {
                return updateToOptions(Curry._2(fromRoute, action, route));
              } else {
                return /* tuple */[
                        undefined,
                        undefined
                      ];
              }
            }),
          /* updateRoute */(function (prevAndNextState) {
              var update = Curry._1(toRoute, prevAndNextState);
              if (typeof update === "number") {
                update === 0;
              } else if (update.tag) {
                var route = update[0];
                if (Caml_obj.caml_notequal(previousRoute[0], route)) {
                  previousRoute[0] = route;
                  router.replace(Route$ReasonTea.toUrl(route));
                }
                
              } else {
                var route$1 = update[0];
                if (Caml_obj.caml_notequal(previousRoute[0], route$1)) {
                  previousRoute[0] = route$1;
                  router.push(Route$ReasonTea.toUrl(route$1));
                }
                
              }
              return /* () */0;
            }),
          /* render */(function (self) {
              return Curry._1(enqueueRender, Curry._1(view, self));
            })
        ];
}

var defaultRouter = Router$ReasonTea.memory(/* () */0);

function startup($staropt$star, program, renderer) {
  var router = $staropt$star !== undefined ? Js_primitive.valFromOption($staropt$star) : defaultRouter;
  var looper = loop(router, program[/* update */3], program[/* view */4], program[/* toRoute */2], program[/* fromRoute */1], renderer);
  var match = Curry._1(looper[/* init */0], /* () */0);
  var maybeInitState = match[0];
  var initState = maybeInitState !== undefined ? Js_primitive.valFromOption(maybeInitState) : Pervasives.failwith("`fromRoute` must return an initial state");
  var match$1 = Curry._1(program[/* toRoute */2], /* record */[
        /* previous */initState,
        /* next */initState
      ]);
  if (typeof match$1 === "number" && match$1 !== 0) {
    
  } else {
    Pervasives.failwith("toRoute should result in no transition when called with initial state.");
  }
  programStateWrapper(initState, match[1], looper);
  return /* () */0;
}

var routerProgram = program;

exports.getRoute = getRoute;
exports.defaultRoute = defaultRoute;
exports.fromRouteDefault = fromRouteDefault;
exports.toRouteDefault = toRouteDefault;
exports.updateDefault = updateDefault;
exports.viewDefault = viewDefault;
exports.program = program;
exports.programStateWrapper = programStateWrapper;
exports.loop = loop;
exports.defaultRouter = defaultRouter;
exports.startup = startup;
exports.routerProgram = routerProgram;
/* defaultRoute Not a pure module */
