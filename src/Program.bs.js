// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var BsHistory = require("bs-history/src/BsHistory.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Route$ReasonTea = require("./Route.bs.js");
var Router$ReasonTea = require("./Router.bs.js");

function getRoute($$location) {
  return Route$ReasonTea.make(Route$ReasonTea.path($$location), Route$ReasonTea.hash($$location), Route$ReasonTea.search($$location));
}

var defaultRoute = Route$ReasonTea.make(/* :: */[
      "",
      /* [] */0
    ], "", "");

function fromRouteDefault(_, _$1) {
  return /* NoUpdate */0;
}

function toRouteDefault() {
  return /* NoTransition */1;
}

function updateDefault(_, _$1) {
  return /* NoUpdate */0;
}

function viewDefault() {
  return Pervasives.failwith("Must assign a view method");
}

function program(debug) {
  return /* record */[
          /* debug */debug,
          /* fromRoute */fromRouteDefault,
          /* toRoute */toRouteDefault,
          /* update */updateDefault,
          /* view */viewDefault
        ];
}

function programStateWrapper(initState, looper) {
  var currentState = /* record */[/* contents */initState];
  var runner = function (action) {
    var update = Curry._2(looper[/* dispatch */3], action, currentState[0]);
    var nextState = update ? update[0] : currentState[0];
    Curry._1(looper[/* updateRoute */5], /* record */[
          /* previous */currentState[0],
          /* next */nextState
        ]);
    currentState[0] = nextState;
    Curry._1(looper[/* render */6], /* record */[
          /* state */nextState,
          /* send */runner
        ]);
    return /* () */0;
  };
  Curry._1(looper[/* listen */2], (function ($$location, action) {
          var routeAction = action !== 4003185 ? (
              action >= 893009402 ? (console.log("listener: push"), /* Push */1) : (console.log("listener: replace"), /* Replace */3)
            ) : (console.log("listener: pop"), /* Pop */2);
          var update = Curry._2(looper[/* getFromRoute */4], routeAction, getRoute($$location));
          var nextState = update ? update[0] : currentState[0];
          currentState[0] = nextState;
          Curry._1(looper[/* render */6], /* record */[
                /* state */nextState,
                /* send */runner
              ]);
          return /* () */0;
        }));
  Curry._1(looper[/* start */1], /* record */[
        /* state */currentState[0],
        /* send */runner
      ]);
  return /* () */0;
}

function loop(router, update, view, toRoute, fromRoute, enqueueRender) {
  return /* record */[
          /* init */(function () {
              var $$location = Router$ReasonTea.getCurrent(router);
              var match = Curry._2(fromRoute, /* Init */0, getRoute($$location));
              var initState = match ? match[0] : Pervasives.failwith("Must init a state");
              var match$1 = Curry._1(toRoute, /* record */[
                    /* previous */initState,
                    /* next */initState
                  ]);
              if (typeof match$1 === "number" && match$1 !== 0) {
                
              } else {
                Pervasives.failwith("toRoute should result in no transition when called with initial state.");
              }
              return initState;
            }),
          /* start */(function (self) {
              return Curry._1(enqueueRender, Curry._1(view, self));
            }),
          /* listen */(function (callback) {
              BsHistory.listen(callback)(router);
              return /* () */0;
            }),
          /* dispatch */Curry.__2(update),
          /* getFromRoute */Curry.__2(fromRoute),
          /* updateRoute */(function (prevAndNextState) {
              var update = Curry._1(toRoute, prevAndNextState);
              if (typeof update === "number") {
                update === 0;
              } else if (update.tag) {
                router.replace(Route$ReasonTea.toUrl(update[0]));
              } else {
                router.push(Route$ReasonTea.toUrl(update[0]));
              }
              return /* () */0;
            }),
          /* render */(function (self) {
              return Curry._1(enqueueRender, Curry._1(view, self));
            })
        ];
}

var defaultRouter = Router$ReasonTea.memory(/* () */0);

function startup($staropt$star, program, renderer) {
  var router = $staropt$star !== undefined ? Js_primitive.valFromOption($staropt$star) : defaultRouter;
  var looper = loop(router, program[/* update */3], program[/* view */4], program[/* toRoute */2], program[/* fromRoute */1], renderer);
  var initState = Curry._1(looper[/* init */0], /* () */0);
  programStateWrapper(initState, looper);
  return /* () */0;
}

var routerProgram = program;

exports.getRoute = getRoute;
exports.defaultRoute = defaultRoute;
exports.fromRouteDefault = fromRouteDefault;
exports.toRouteDefault = toRouteDefault;
exports.updateDefault = updateDefault;
exports.viewDefault = viewDefault;
exports.program = program;
exports.programStateWrapper = programStateWrapper;
exports.loop = loop;
exports.defaultRouter = defaultRouter;
exports.startup = startup;
exports.routerProgram = routerProgram;
/* defaultRoute Not a pure module */
