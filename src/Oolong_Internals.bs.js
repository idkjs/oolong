// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var BsHistory = require("bs-history/src/BsHistory.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var CreateHashHistory = require("history/createHashHistory").default;
var CreateMemoryHistory = require("history/createMemoryHistory").default;

function path($$location) {
  var pathname = $$location.pathname;
  var segments = pathname.split("/");
  return Belt_List.fromArray(Belt_Array.keep(segments, (function (segment) {
                    return segment !== "";
                  })));
}

function search($$location) {
  var raw = $$location.search;
  return raw.slice(1);
}

function hash($$location) {
  var raw = $$location.hash;
  return raw.slice(1);
}

function make(path, search, hash) {
  return {
          path: path,
          search: search,
          hash: hash
        };
}

function fromLocation($$location) {
  return {
          path: path($$location),
          search: search($$location),
          hash: hash($$location)
        };
}

function toString(route) {
  var search = route.search !== "" ? "?" + route.search : "";
  var hash = route.hash !== "" ? "#" + route.hash : "";
  return "/" + ($$String.concat("/", route.path) + (search + hash));
}

var Route = {
  path: path,
  search: search,
  hash: hash,
  make: make,
  fromLocation: fromLocation,
  toString: toString
};

function make$1(action, route) {
  if (action === "Pop") {
    return {
            TAG: /* Pop */1,
            _0: route.path,
            _1: route.search,
            _2: route.hash
          };
  } else if (action === "Push") {
    return {
            TAG: /* Push */0,
            _0: route.path,
            _1: route.search,
            _2: route.hash
          };
  } else {
    return {
            TAG: /* Replace */2,
            _0: route.path,
            _1: route.search,
            _2: route.hash
          };
  }
}

var RouterAction = {
  make: make$1
};

var atomic = {
  contents: false
};

function isAtomic(param) {
  return atomic.contents;
}

function wrapCallback(callback, $$location, action) {
  if (atomic.contents !== false) {
    return ;
  }
  var route = fromLocation($$location);
  var routerAction = make$1(action, route);
  Curry._1(callback, routerAction);
  
}

function listen(callback, router) {
  return BsHistory.listen(function (param, param$1) {
                return wrapCallback(callback, param, param$1);
              })(router);
}

function hash$1(param) {
  return CreateHashHistory({
              basename: ""
            });
}

function memory(param) {
  return CreateMemoryHistory({
              initialEntries: ["/"],
              initialIndex: 0,
              keyLength: 6
            });
}

function getCurrent(router) {
  return router.location;
}

function pushAtomic(router, url) {
  atomic.contents = true;
  router.push(url);
  atomic.contents = false;
  
}

function replaceAtomic(router, url) {
  atomic.contents = true;
  router.replace(url);
  atomic.contents = false;
  
}

function popAtomic(router) {
  atomic.contents = true;
  router.goBack();
  atomic.contents = false;
  
}

function goAtomic(router, amount) {
  atomic.contents = true;
  router.go(amount);
  atomic.contents = false;
  
}

var Router = {
  atomic: atomic,
  isAtomic: isAtomic,
  wrapCallback: wrapCallback,
  listen: listen,
  hash: hash$1,
  memory: memory,
  getCurrent: getCurrent,
  pushAtomic: pushAtomic,
  replaceAtomic: replaceAtomic,
  popAtomic: popAtomic,
  goAtomic: goAtomic
};

function make$2(path, search, hash) {
  return toString({
              path: path,
              search: search,
              hash: hash
            });
}

var Url = {
  make: make$2
};

exports.Route = Route;
exports.RouterAction = RouterAction;
exports.Router = Router;
exports.Url = Url;
/* history/createHashHistory Not a pure module */
