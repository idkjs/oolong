// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var BsHistory = require("bs-history/src/BsHistory.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var CreateHashHistory = require("history/createHashHistory");
var CreateMemoryHistory = require("history/createMemoryHistory");

function path($$location) {
  var pathname = $$location.pathname;
  var segments = pathname.split("/");
  return Belt_List.fromArray(Belt_Array.keep(segments, (function (segment) {
                    return segment !== "";
                  })));
}

function search($$location) {
  var raw = $$location.search;
  return raw.slice(1);
}

function hash($$location) {
  var raw = $$location.hash;
  return raw.slice(1);
}

function make(path, search, hash) {
  return /* record */[
          /* path */path,
          /* search */search,
          /* hash */hash
        ];
}

function fromLocation($$location) {
  return /* record */[
          /* path */path($$location),
          /* search */search($$location),
          /* hash */hash($$location)
        ];
}

function toString(route) {
  var match = route[/* search */1] !== "";
  var search = match ? "?" + route[/* search */1] : "";
  var match$1 = route[/* hash */2] !== "";
  var hash = match$1 ? "#" + route[/* hash */2] : "";
  return "/" + ($$String.concat("/", route[/* path */0]) + (search + hash));
}

var Route = /* module */[
  /* path */path,
  /* search */search,
  /* hash */hash,
  /* make */make,
  /* fromLocation */fromLocation,
  /* toString */toString
];

function make$1(action, route) {
  if (action !== 4003185) {
    if (action >= 893009402) {
      return /* Push */Block.__(0, [
                route[/* path */0],
                route[/* search */1],
                route[/* hash */2]
              ]);
    } else {
      return /* Replace */Block.__(2, [
                route[/* path */0],
                route[/* search */1],
                route[/* hash */2]
              ]);
    }
  } else {
    return /* Pop */Block.__(1, [
              route[/* path */0],
              route[/* search */1],
              route[/* hash */2]
            ]);
  }
}

var RouterAction = /* module */[/* make */make$1];

var atomic = /* record */[/* contents */false];

function isAtomic(param) {
  return atomic[0];
}

function wrapCallback(callback, $$location, action) {
  if (atomic[0] === false) {
    var route = fromLocation($$location);
    var routerAction = make$1(action, route);
    Curry._1(callback, routerAction);
    return /* () */0;
  } else {
    return 0;
  }
}

function listen(callback, router) {
  return BsHistory.listen((function (param, param$1) {
                  return wrapCallback(callback, param, param$1);
                }))(router);
}

function hash$1(param) {
  return CreateHashHistory.default({
              basename: ""
            });
}

function memory(param) {
  return CreateMemoryHistory.default({
              initialEntries: /* array */["/"],
              initialIndex: 0,
              keyLength: 6
            });
}

function getCurrent(router) {
  return router.location;
}

function pushAtomic(router, url) {
  atomic[0] = true;
  router.push(url);
  atomic[0] = false;
  return /* () */0;
}

function replaceAtomic(router, url) {
  atomic[0] = true;
  router.replace(url);
  atomic[0] = false;
  return /* () */0;
}

function popAtomic(router) {
  atomic[0] = true;
  router.goBack();
  atomic[0] = false;
  return /* () */0;
}

function goAtomic(router, amount) {
  atomic[0] = true;
  router.go(amount);
  atomic[0] = false;
  return /* () */0;
}

var Router = /* module */[
  /* atomic */atomic,
  /* isAtomic */isAtomic,
  /* wrapCallback */wrapCallback,
  /* listen */listen,
  /* hash */hash$1,
  /* memory */memory,
  /* getCurrent */getCurrent,
  /* pushAtomic */pushAtomic,
  /* replaceAtomic */replaceAtomic,
  /* popAtomic */popAtomic,
  /* goAtomic */goAtomic
];

function make$2(path, search, hash) {
  return toString(/* record */[
              /* path */path,
              /* search */search,
              /* hash */hash
            ]);
}

var Url = /* module */[/* make */make$2];

exports.Route = Route;
exports.RouterAction = RouterAction;
exports.Router = Router;
exports.Url = Url;
/* history/createHashHistory Not a pure module */
